/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import managers.DataManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.TableModel;
import utility.Printer;
import utility.RSTableModel;
import utility.Viewer;

/**
 *
 * @author Zach
 */
public class MainFrame extends javax.swing.JFrame {

    DataManager myManager;

    public void setMyManager(DataManager myManager) {
        this.myManager = myManager;
    }

    public DataManager getMyManager() {
        return myManager;
    }

    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topToolBar = new javax.swing.JToolBar();
        loginIconButton = new javax.swing.JButton();
        outputTabbedPane = new javax.swing.JTabbedPane();
        logPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        resultPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        statusTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();
        sqlTabbedPane = new javax.swing.JTabbedPane();
        sqlPanel = new javax.swing.JPanel();
        sqlToolBar = new javax.swing.JToolBar();
        sqlIconButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        sqlTextArea = new javax.swing.JTextArea();
        runQueryButton = new javax.swing.JButton();
        runUpdateButton = new javax.swing.JButton();
        sqlClearButton = new javax.swing.JButton();
        evaluateButton = new javax.swing.JButton();
        topMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveTableMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        connectionMenu = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        counselorMenuItem = new javax.swing.JMenuItem();
        subjectMenuItem = new javax.swing.JMenuItem();
        appointmentTableMenuItem = new javax.swing.JMenuItem();
        evaluationTableMenuItem = new javax.swing.JMenuItem();
        appointmentMenu = new javax.swing.JMenu();
        appointmentMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Window - Data Manager");

        topToolBar.setRollover(true);

        loginIconButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forms/images/newConnection.JPG"))); // NOI18N
        loginIconButton.setToolTipText("New connection...Ctrl+L");
        loginIconButton.setFocusable(false);
        loginIconButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loginIconButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loginIconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginIconButtonActionPerformed(evt);
            }
        });
        topToolBar.add(loginIconButton);

        logPanel.setBackground(new java.awt.Color(153, 255, 153));

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        outputTabbedPane.addTab("Log", logPanel);

        resultPanel.setBackground(new java.awt.Color(255, 102, 102));

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        jScrollPane2.setViewportView(resultTextArea);

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        outputTabbedPane.addTab("Result", resultPanel);

        statusTextField.setText("Display the current status ....");

        viewTable.setModel(new javax.swing.table.DefaultTableModel());
        jScrollPane3.setViewportView(viewTable);

        sqlToolBar.setRollover(true);

        sqlIconButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forms/images/sqlicon.jpg"))); // NOI18N
        sqlIconButton.setFocusable(false);
        sqlIconButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sqlIconButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sqlToolBar.add(sqlIconButton);

        sqlTextArea.setColumns(20);
        sqlTextArea.setRows(5);
        jScrollPane4.setViewportView(sqlTextArea);

        runQueryButton.setText("Run Query");
        runQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runQueryButtonActionPerformed(evt);
            }
        });

        runUpdateButton.setText("Run Update");
        runUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runUpdateButtonActionPerformed(evt);
            }
        });

        sqlClearButton.setText("Clear");
        sqlClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqlClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sqlPanelLayout = new javax.swing.GroupLayout(sqlPanel);
        sqlPanel.setLayout(sqlPanelLayout);
        sqlPanelLayout.setHorizontalGroup(
            sqlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sqlToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(sqlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sqlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(sqlPanelLayout.createSequentialGroup()
                        .addComponent(runQueryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(runUpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                        .addComponent(sqlClearButton)))
                .addContainerGap())
        );
        sqlPanelLayout.setVerticalGroup(
            sqlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sqlPanelLayout.createSequentialGroup()
                .addComponent(sqlToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sqlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runQueryButton)
                    .addComponent(runUpdateButton)
                    .addComponent(sqlClearButton))
                .addContainerGap())
        );

        sqlTabbedPane.addTab("SQL", sqlPanel);

        evaluateButton.setText("Evaluate Our Performance");
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        saveTableMenuItem.setText("Save Table to File...");
        saveTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTableMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveTableMenuItem);

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forms/images/disconnect.JPG"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit application");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        topMenuBar.add(fileMenu);

        connectionMenu.setText("Connection");

        loginMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loginMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forms/images/newConnection.JPG"))); // NOI18N
        loginMenuItem.setText("New Connection...");
        loginMenuItem.setToolTipText("Make a new connection to a data source");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });
        connectionMenu.add(loginMenuItem);

        topMenuBar.add(connectionMenu);

        viewMenu.setText("View");
        viewMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMenuActionPerformed(evt);
            }
        });

        counselorMenuItem.setText("Counselors");
        counselorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                counselorMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(counselorMenuItem);

        subjectMenuItem.setText("Subjects");
        subjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(subjectMenuItem);

        appointmentTableMenuItem.setText("Appointments");
        appointmentTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentTableMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(appointmentTableMenuItem);

        evaluationTableMenuItem.setText("Evaluations");
        evaluationTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluationTableMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(evaluationTableMenuItem);

        topMenuBar.add(viewMenu);

        appointmentMenu.setText("Appointment");

        appointmentMenuItem.setText("Make Appointment");
        appointmentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentMenuItemActionPerformed(evt);
            }
        });
        appointmentMenu.add(appointmentMenuItem);

        topMenuBar.add(appointmentMenu);

        setJMenuBar(topMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusTextField)
            .addComponent(jScrollPane3)
            .addGroup(layout.createSequentialGroup()
                .addComponent(outputTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sqlTabbedPane))
            .addComponent(topToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(362, 362, 362)
                .addComponent(evaluateButton)
                .addGap(362, 362, 362))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evaluateButton)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputTabbedPane)
                    .addComponent(sqlTabbedPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
        Login login = new Login(this);
        login.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        login.pack();
        login.setLocationRelativeTo(null);
        login.setVisible(true);
    }//GEN-LAST:event_loginMenuItemActionPerformed

    private void loginIconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginIconButtonActionPerformed
        Login login = new Login(this);
        login.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        login.pack();
        login.setLocationRelativeTo(null);
        login.setVisible(true);
    }//GEN-LAST:event_loginIconButtonActionPerformed

    private void viewMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuActionPerformed

    }//GEN-LAST:event_viewMenuActionPerformed

    private void counselorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counselorMenuItemActionPerformed
        if (this.myManager != null) {
            try {
                Viewer.viewDatabaseTable(this.myManager.getConn(), "counselor", this.viewTable);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Make a connection to MySQL...");
        }
    }//GEN-LAST:event_counselorMenuItemActionPerformed

    private void subjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectMenuItemActionPerformed
        if (this.myManager != null) {
            try {
                Viewer.viewDatabaseTable(this.myManager.getConn(), "subject", this.viewTable);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Make a connection to MySQL...");
        }
    }//GEN-LAST:event_subjectMenuItemActionPerformed

    private void saveTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTableMenuItemActionPerformed
        String title = "Report";
        if (RSTableModel.tableToString(this.viewTable).isEmpty()) {
            this.logTextArea.append("\nEmpty table won't be saved...");
        } else {
            String feedback = Printer.saveToFile(RSTableModel.tableToString(this.viewTable), title);
            this.logTextArea.append("\n" + feedback + "\n");
        }

    }//GEN-LAST:event_saveTableMenuItemActionPerformed

    private void runQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runQueryButtonActionPerformed
        String input = this.sqlTextArea.getText();
        if (input.equals("")) {
            this.logTextArea.append("\nNo input found in SQL query tab.");
        } else if (this.myManager == null) {
            JOptionPane.showMessageDialog(null, "Make a connection...");
            this.logTextArea.append("\nConnection not found.");
        } else {
            ResultSet results = (ResultSet) this.myManager.runQuery(input, 0);
            TableModel model = RSTableModel.rsToTableModel(results);
            this.viewTable.setModel(model);
        }
    }//GEN-LAST:event_runQueryButtonActionPerformed

    private void runUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runUpdateButtonActionPerformed
        String input = this.sqlTextArea.getText();
        if (input.equals("")) {
            this.logTextArea.append("\nNo input found in SQL query tab.");
        } else if (this.myManager == null) {
            JOptionPane.showMessageDialog(null, "Make a connection...");
            this.logTextArea.append("\nConnection not found.");
        } else {
            String results = this.myManager.runUpdate(input);
            this.logTextArea.append(results);
        }
    }//GEN-LAST:event_runUpdateButtonActionPerformed

    private void sqlClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqlClearButtonActionPerformed
        this.sqlTextArea.setText("");
    }//GEN-LAST:event_sqlClearButtonActionPerformed

    private void appointmentTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentTableMenuItemActionPerformed
        if (this.myManager != null) {
            try {
                Viewer.viewDatabaseTable(this.myManager.getConn(), "appointment", this.viewTable);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Make a connection to MySQL...");
        }
    }//GEN-LAST:event_appointmentTableMenuItemActionPerformed

    private void appointmentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentMenuItemActionPerformed
        if (this.myManager != null) {
            Appointment appointment = new Appointment(this);
            appointment.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            appointment.pack();
            appointment.setLocationRelativeTo(null);
            appointment.setVisible(true);
            appointment.fillCombo(this.myManager.getConn());
        } else {
            JOptionPane.showMessageDialog(null, "Make a connection first...");
        }
    }//GEN-LAST:event_appointmentMenuItemActionPerformed

    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed
        if (this.myManager != null) {
            Evaluation eval = new Evaluation(this);
            eval.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            eval.pack();
            eval.setLocationRelativeTo(null);
            eval.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Make a connection first...");
        }
    }//GEN-LAST:event_evaluateButtonActionPerformed

    private void evaluationTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluationTableMenuItemActionPerformed
        if (this.myManager != null) {
            try {
                Viewer.viewDatabaseTable(this.myManager.getConn(), "evaluation", this.viewTable);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Make a connection to MySQL...");
        }
    }//GEN-LAST:event_evaluationTableMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    public JTextArea getLogTextArea() {
        return logTextArea;
    }

    public JTextField getStatusTextField() {
        return statusTextField;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu appointmentMenu;
    private javax.swing.JMenuItem appointmentMenuItem;
    private javax.swing.JMenuItem appointmentTableMenuItem;
    private javax.swing.JMenu connectionMenu;
    private javax.swing.JMenuItem counselorMenuItem;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JMenuItem evaluationTableMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton loginIconButton;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JTabbedPane outputTabbedPane;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JButton runQueryButton;
    private javax.swing.JButton runUpdateButton;
    private javax.swing.JMenuItem saveTableMenuItem;
    private javax.swing.JButton sqlClearButton;
    private javax.swing.JButton sqlIconButton;
    private javax.swing.JPanel sqlPanel;
    private javax.swing.JTabbedPane sqlTabbedPane;
    private javax.swing.JTextArea sqlTextArea;
    private javax.swing.JToolBar sqlToolBar;
    private javax.swing.JTextField statusTextField;
    private javax.swing.JMenuItem subjectMenuItem;
    private javax.swing.JMenuBar topMenuBar;
    private javax.swing.JToolBar topToolBar;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JTable viewTable;
    // End of variables declaration//GEN-END:variables
}
